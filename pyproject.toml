[tool.poetry]
name = "mytodo"
version = "0.1.0"
description = "Com esse projeto temos a inteção de estudar a criação de API's com fastAPI."
authors = ["Jorge Luiz Plautz <jorge.plautz@gmail.com>"]
license = "GPLv3+"
readme = "README.md"
packages = [{include = "todo"}] 

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.100.0"
uvicorn = "^0.23.1"
psycopg2-binary = "^2.9.6"
sqlmodel = "^0.0.8"
dynaconf = "^3.2.0"
alembic = "^1.11.1"
rich = "^13.5.2"
typer = "^0.9.0"
python-slugify = "^8.0.1"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}

[tool.poetry.scripts]
todo = "todo.cli:main"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-order = "^1.1.0"
ipython = "^8.14.0"
ipdb = "^0.13.13"
httpx = "^0.24.1"
pytest-cov = "^4.1.0"
taskipy = "^1.11.0"
blue = "^0.9.1"
isort = "^5.12.0"

[tool.pytest.ini_options]
python_files = [
    "test*.py",
    "*tests.py",
]
minversion = "6.0"
addopts = "-ra -q -vv"
testpaths = [
    "/tests",
]

[tool.isort]
profile = "black"  # <-- para alinhar os parametros do import 
line_length = 79   # <-- Projeto do River esta com flake8 com 120 caracteres 

[tool.taskipy.tasks]
test = {cmd = "pytest -x", help = "Run test and abort if has one fail."}
test-cov = {cmd = "pytest --cov=todo", help = "Run test and give us a coverage report."}
lint = {cmd = "blue --check --diff . && isort --check --diff .", help = "Run lint to check by blue and isort."}
clean = {cmd = "find ./ -name '*.pyc' -delete && find ./ -name '__pycache__' -delete && find ./ -name 'Thumbs.db' -delete && find ./ -name '*~' -delete && rm -rf .cache && rm -rf .pytest_cache && rm -rf dist && rm -rf *.egg-info && rm -rf htmlcov && rm -rf .tox/ && rm -rf site", help = "Clear the project off all files that are dispensables."}
down = {cmd = "docker compose down", help = "Down the services containers."}
remove-img = {cmd = "docker image rm mytodo-api:latest todo_postgres-15-alpine-multi-user:latest", help = "Delete containers images to build again."}
up = {cmd = "docker compose up -d", help = "Up the services containers."}
pre_build = "task down && task remove-img"
build = {cmd = "docker compose build --no-cache", help = "Build the images' services."}
post_build = "task up"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
